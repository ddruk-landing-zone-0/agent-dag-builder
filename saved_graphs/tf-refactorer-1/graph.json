{
    "graph_id": "4c0c90d3d82aebda2bb6cf74dae5d48694dee728d699bd530d8dda3ce88af1bd",
    "nodes": {
        "inputs": {
            "nodeName": "inputs",
            "systemInstructions": "N/A",
            "userPrompt": "N/A",
            "pythonCode": {},
            "outputSchema": {
                "ExistingLocalVar": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}",
                "Modules": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "SampleLocalIam_member_properties": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}",
                "SampleLocalRoles": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}",
                "SampleLocalSas": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}",
                "SampleMember_iam_module_properties": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "useLLM": false,
            "jsonMode": false,
            "toolName": "N/A",
            "toolDescription": "N/A",
            "kwargs": {
                "ExistingLocalVar": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}",
                "Modules": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "SampleLocalIam_member_properties": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}",
                "SampleLocalRoles": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}",
                "SampleLocalSas": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}",
                "SampleMember_iam_module_properties": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "id": "6f40bc6520f36b96b48ae6be746f03c299410075bed62b78633a09dcf4c88ed2",
            "_compiled": true,
            "_parents": [],
            "_children": [
                "SaResolver",
                "Member_iam_module_properties",
                "google_service_account_iam_member_properties",
                "RoleResolver"
            ],
            "_inputs": {},
            "_outputs": {
                "ExistingLocalVar": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}",
                "Modules": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "SampleLocalIam_member_properties": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}",
                "SampleLocalRoles": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}",
                "SampleLocalSas": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}",
                "SampleMember_iam_module_properties": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "status": "completed"
        },
        "FinalLocal": {
            "nodeName": "FinalLocal",
            "systemInstructions": "You are a terraform code generator. Your task is to read some different snippets of terraform code and to combine them into a single terraform code.",
            "userPrompt": "Here are some snippets of terraform code:\nLocal Variables Snippet 1:\n```\n@[inputs. ExistingLocalVar]\n```\nLocal Variables Snippet 2:\n```\n@[Member_iam_module_properties.output]\n```\nLocal Variables Snippet 3:\n```\n@[RoleResolver.output]\n```\nLocal Variables Snippet 4:\n```\n@[SaResolver.output]\n```\nLocal Variables Snippet 5:\n```\n@[google_service_account_iam_member_properties.output]\n```\n\nNow combine all these snippets into a single terraform code.\n\nlocals {\n  ... write the code here\n}",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "final local block"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "deployed_gcp": false,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "wait_time": 30
            },
            "id": "607aa34e058933c7605dd9ad3bb0e293817ed95072cd666d756a9b7bc3b037f9",
            "_compiled": true,
            "_parents": [
                [
                    "Member_iam_module_properties",
                    "output"
                ],
                [
                    "RoleResolver",
                    "output"
                ],
                [
                    "SaResolver",
                    "output"
                ],
                [
                    "google_service_account_iam_member_properties",
                    "output"
                ]
            ],
            "_children": [],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        },
        "Member_iam_module_properties": {
            "nodeName": "Member_iam_module_properties",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a list of properties for all the modules that uses 'terraform-google-modules/iam/google//modules/member_iam' as source.",
            "userPrompt": "Create local variable `member_iam_module_properties` to group all the properties of `terraform-google-modules/iam/google//modules/member_iam` modules those are used in the code.\n\nYou have to reuse the existing variables and locals in the code.\nThe existing variables and locals are:\n``` @[SaResolver.output] and ``` @[RoleResolver.output] ```\n\nNow complete this reusing the existing variables and locals and looking at the above code.\n\n```\n@[inputs.SampleMember_iam_module_properties] \n```",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "Member iam_module properties"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "deployed_gcp": false,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "wait_time": 30
            },
            "id": "ce4999e9bf1a5be8f6f8676a597c160894baf676cd286383f236565c1fac8ee5",
            "_compiled": true,
            "_parents": [
                [
                    "SaResolver",
                    "output"
                ],
                [
                    "RoleResolver",
                    "output"
                ],
                [
                    "inputs",
                    "SampleMember_iam_module_properties"
                ]
            ],
            "_children": [
                "FinalLocal"
            ],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        },
        "RoleResolver": {
            "nodeName": "RoleResolver",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a section for all the roles and permissions that are used in the code.",
            "userPrompt": "Here is the full terraform code \n```\n@[inputs.Modules]\n```\n\nNow complete this roles section in local variable. Mention all the roles those are mentioned in the above code. Dont keep any duplicate roles and you must not miss any roles. \n\n```\n@[inputs.SampleLocalRoles]\n```\n\nComplete this.",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "local role variables"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "deployed_gcp": false,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "wait_time": 30
            },
            "id": "1eb677df891874e6546dcf92c80b16eec29fd32f53d47a86af9a98d7be8d903e",
            "_compiled": true,
            "_parents": [
                [
                    "inputs",
                    "Modules"
                ],
                [
                    "inputs",
                    "SampleLocalRoles"
                ]
            ],
            "_children": [
                "FinalLocal",
                "Member_iam_module_properties",
                "google_service_account_iam_member_properties"
            ],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        },
        "SaResolver": {
            "nodeName": "SaResolver",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a section for all the service accounts that are used in the code.",
            "userPrompt": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a section for all the service accounts that are used in the code.\n\nHere is the full terraform code ``` @[inputs.Modules] ``` Now complete this service account section in local variable. Mention all the service accounts those are mentioned in the above code. Dont keep any duplicate service accounts and you must not miss any accounts. Also reuse the existing variables and locals in the code.\nThe service accounts are mentioned like service_account_address, member etc. You have to look for all types of such mentions in the code.\n\nComplete this.\n@[inputs.SampleLocalSas]",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "Service Account Local Variables"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "deployed_gcp": false,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "wait_time": 30
            },
            "id": "9b7eeaba466bedb00be73f418b47c8cdcc9c1972621cda8682086d3dd968e7b1",
            "_compiled": true,
            "_parents": [
                [
                    "inputs",
                    "Modules"
                ],
                [
                    "inputs",
                    "SampleLocalSas"
                ]
            ],
            "_children": [
                "FinalLocal",
                "Member_iam_module_properties",
                "google_service_account_iam_member_properties"
            ],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        },
        "google_service_account_iam_member_properties": {
            "nodeName": "google_service_account_iam_member_properties",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a list of properties for all the google_service_account_iam_member resources that are used in the code.",
            "userPrompt": "Create local variable `google_service_account_iam_member_properties` to group all the properties of `google_service_account_iam_member` resources those are used in the code. You have to reuse the existing variables and locals in the code.\nHere's the full terraform code ``` @[inputs.Modules] ``` Now complete this `google_service_account_iam_member_properties` section in local variable. List down all the properties those are mentioned in the above code. Don't keep any duplicate properties and you must not miss any properties. Also reuse the existing variables and locals in the code.\n\nThe existing variables and locals are:\n``` @[SaResolver.output] ``` and ``` @[RoleResolver.output] ```\n\nNow complete this reusing the existing variables and locals and looking at the above code.\n\n@[inputs.SampleLocalIam_member_properties]",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "google_service_account_iam_member_properties"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "deployed_gcp": false,
                "max_output_tokens": 6921,
                "max_retries": 5,
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.68,
                "wait_time": 30
            },
            "id": "754c9b8ab5f2abda0e470a841e20560a46a371c6df3719fc23c4e5d5aed150cc",
            "_compiled": true,
            "_parents": [
                [
                    "inputs",
                    "Modules"
                ],
                [
                    "SaResolver",
                    "output"
                ],
                [
                    "RoleResolver",
                    "output"
                ],
                [
                    "inputs",
                    "SampleLocalIam_member_properties"
                ]
            ],
            "_children": [
                "FinalLocal"
            ],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        }
    },
    "venv_path": "./runner_envs/venv",
    "python_packages": [],
    "create_env": true
}