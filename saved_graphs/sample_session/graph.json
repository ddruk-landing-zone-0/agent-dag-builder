{
    "graph_id": "896c47b6b45ca13d862f65250f4bb439750d1573c5abca593fe68389236515fa",
    "nodes": {
        "inputs": {
            "nodeName": "inputs",
            "systemInstructions": "Input node",
            "userPrompt": "Input node",
            "pythonCode": {},
            "outputSchema": {
                "input1": "1",
                "input2": "2",
                "input3": "10"
            },
            "kwargs": {
                "input1": "1",
                "input2": "2",
                "input3": "10"
            },
            "id": "87b3d82187f540697ff904ef163ddc73568d53432a71c9ce82038bd5262c4fa2",
            "_compiled": true,
            "_parents": [],
            "_children": [
                "node1",
                "node2",
                "node3"
            ],
            "_inputs": {},
            "_outputs": {
                "input1": "1",
                "input2": "2",
                "input3": "10"
            },
            "status": "completed"
        },
        "node3": {
            "nodeName": "node3",
            "systemInstructions": "This is a test system instruction for Node3.",
            "userPrompt": "Calculate the sum of @[node1.output1] and @[node2.output1] and @[inputs.input1]",
            "pythonCode": {
                "argument": {
                    "arg1": "@[node1.output1]",
                    "arg2": "@[node2.output1]",
                    "arg3": "@[inputs.input1]"
                },
                "function_body": "def function(arg1, arg2, arg3):\n    return {'output1': int(arg1) + int(arg2) + int(arg3)}"
            },
            "outputSchema": {
                "output1": "This is the output1 of Node3 , sum of node1.output1, node2.output1 and input1"
            },
            "kwargs": {},
            "id": "71840c4f47d738a1f675eb38806f06c641004e7ce6c65e3fb170972b10e2b4fa",
            "_compiled": false,
            "_parents": [],
            "_children": [],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        },
        "node2": {
            "nodeName": "node2",
            "systemInstructions": "This is a test system instruction for Node2.",
            "userPrompt": "Calculate the product of @[inputs.input1] and @[inputs.input2] and @[inputs.input3]",
            "pythonCode": {
                "argument": {
                    "arg1": "@[inputs.input1]",
                    "arg2": "@[inputs.input2]",
                    "arg3": "@[inputs.input3]"
                },
                "function_body": "import time; \ndef function(arg1, arg2, arg3):\n    return {'output1': int(arg1) * int(arg2) * int(arg3)}"
            },
            "outputSchema": {
                "output1": "This is the output1 of Node2 , product of input1, input2 and input3"
            },
            "kwargs": {},
            "id": "e841ff169ac9f0dc7831615e12571fe2e57ae0e04e3a6a2e7b8a00bf865b22e7",
            "_compiled": false,
            "_parents": [],
            "_children": [],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        },
        "node1": {
            "nodeName": "node1",
            "systemInstructions": "This is a test system instruction for Node1.",
            "userPrompt": "Calculate the sum of @[inputs.input1] and @[inputs.input2] and @[inputs.input1]^2",
            "pythonCode": {
                "argument": {
                    "arg1": "@[inputs.input1]",
                    "arg2": "@[inputs.input2]"
                },
                "function_body": "def function(arg1, arg2):\n    return {'output1': int(arg1) + int(arg2), 'output2': int(arg1)**3}"
            },
            "outputSchema": {
                "output1": "This is the output1 of Node1 , sum of input1 and input2",
                "output2": "This is the output2 of Node1 , square of input1"
            },
            "kwargs": {},
            "id": "1595769aeb4e9e5c55c42feefd20f3bd779bfcfbde33277a2042f678944efb31",
            "_compiled": false,
            "_parents": [],
            "_children": [],
            "_inputs": {},
            "_outputs": {},
            "status": "pending"
        }
    },
    "venv_path": "./runner_envs/venv",
    "python_packages": [],
    "create_env": true
}