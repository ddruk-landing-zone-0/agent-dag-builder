{
    "graph_id": "79b222c4526fd32d52d2b0685df6d7c71fd319e03ec5c40cc1df517672655209",
    "nodes": {
        "inputs": {
            "nodeName": "inputs",
            "systemInstructions": "N/A",
            "userPrompt": "N/A",
            "pythonCode": {},
            "outputSchema": {
                "ExistingLocalVar": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}",
                "Modules": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "SampleLocalIam_member_properties": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}",
                "SampleLocalRoles": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}",
                "SampleLocalSas": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}",
                "SampleMember_iam_module_properties": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "useLLM": false,
            "jsonMode": false,
            "toolName": "N/A",
            "toolDescription": "N/A",
            "kwargs": {
                "ExistingLocalVar": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}",
                "Modules": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "SampleLocalIam_member_properties": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}",
                "SampleLocalRoles": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}",
                "SampleLocalSas": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}",
                "SampleMember_iam_module_properties": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "id": "6f40bc6520f36b96b48ae6be746f03c299410075bed62b78633a09dcf4c88ed2",
            "_compiled": true,
            "_parents": [],
            "_children": [
                "Member_iam_module_properties",
                "SaResolver",
                "RoleResolver",
                "google_service_account_iam_member_properties"
            ],
            "_inputs": {},
            "_outputs": {
                "ExistingLocalVar": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}",
                "Modules": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "SampleLocalIam_member_properties": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}",
                "SampleLocalRoles": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}",
                "SampleLocalSas": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}",
                "SampleMember_iam_module_properties": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "status": "completed"
        },
        "RoleResolver": {
            "nodeName": "RoleResolver",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a section for all the roles and permissions that are used in the code.",
            "userPrompt": "Here is the full terraform code \n```\n@[inputs.Modules]\n```\n\nNow complete this roles section in local variable. Mention all the roles those are mentioned in the above code. Dont keep any duplicate roles and you must not miss any roles. \n\n```\n@[inputs.SampleLocalRoles]\n```\n\nComplete this.",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "local role variables"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "wait_time": 30,
                "deployed_gcp": false
            },
            "id": "0655302b1dc849080055e7bd7cee106952205d63675c45869f6f50a50f28e51c",
            "_compiled": true,
            "_parents": [
                [
                    "inputs",
                    "Modules"
                ],
                [
                    "inputs",
                    "SampleLocalRoles"
                ]
            ],
            "_children": [
                "Member_iam_module_properties",
                "FinalLocal",
                "google_service_account_iam_member_properties"
            ],
            "_inputs": {
                "@[inputs.Modules]": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "@[inputs.SampleLocalRoles]": "locals:{  roles = {     runInvoker: \"roles/run.invoker\",     loggingLogWriter: \"roles/logging.logWriter\",     ... complete this  }}"
            },
            "_outputs": {
                "output": "```\nlocals: {\n  roles = {\n    runInvoker: \"roles/run.invoker\",\n    loggingLogWriter: \"roles/logging.logWriter\",\n    roles/storage.objectViewer: \"roles/storage.objectViewer\",\n    roles/viewer: \"roles/viewer\",\n    roles/compute.viewer: \"roles/compute.viewer\",\n    roles/compute.instanceAdmin: \"roles/compute.instanceAdmin\",\n    roles/iam.serviceAccountUser: \"roles/iam.serviceAccountUser\",\n    roles/storage.admin: \"roles/storage.admin\"\n  }\n}\n```"
            },
            "status": "completed"
        },
        "SaResolver": {
            "nodeName": "SaResolver",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a section for all the service accounts that are used in the code.",
            "userPrompt": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a section for all the service accounts that are used in the code.\n\nHere is the full terraform code ``` @[inputs.Modules] ``` Now complete this service account section in local variable. Mention all the service accounts those are mentioned in the above code. Dont keep any duplicate service accounts and you must not miss any accounts. Also reuse the existing variables and locals in the code.\nThe service accounts are mentioned like service_account_address, member etc. You have to look for all types of such mentions in the code.\n\nComplete this.\n@[inputs.SampleLocalSas]",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "Service Account Local Variables"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "wait_time": 30,
                "deployed_gcp": false
            },
            "id": "d7d3eeeb3ed6d4175dfc2ec52a3325dfaf80fb28366bf87458c9450b376c9eca",
            "_compiled": true,
            "_parents": [
                [
                    "inputs",
                    "Modules"
                ],
                [
                    "inputs",
                    "SampleLocalSas"
                ]
            ],
            "_children": [
                "Member_iam_module_properties",
                "FinalLocal",
                "google_service_account_iam_member_properties"
            ],
            "_inputs": {
                "@[inputs.Modules]": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "@[inputs.SampleLocalSas]": "locals{  service_accounts = {    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.project_id}.iam.gserviceaccount.com\",    gh_sa = \"lz-secrets@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\",    ... complete this  }}"
            },
            "_outputs": {
                "output": "```hcl\nlocals {\n  service_accounts = {\n    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    gh_sa = \"lz-secrets@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    core_deployer_sa = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    analytics_deployer_sa = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n    core_ops_sa = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    analytics_ops_sa = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    core_plugin_sa = \"core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    analytics_plugin_sa = \"analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n  }\n}\n```"
            },
            "status": "completed"
        },
        "google_service_account_iam_member_properties": {
            "nodeName": "google_service_account_iam_member_properties",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a list of properties for all the google_service_account_iam_member resources that are used in the code.",
            "userPrompt": "Create local variable `google_service_account_iam_member_properties` to group all the properties of `google_service_account_iam_member` resources those are used in the code. You have to reuse the existing variables and locals in the code.\nHere's the full terraform code ``` @[inputs.Modules] ``` Now complete this `google_service_account_iam_member_properties` section in local variable. List down all the properties those are mentioned in the above code. Don't keep any duplicate properties and you must not miss any properties. Also reuse the existing variables and locals in the code.\n\nThe existing variables and locals are:\n``` @[SaResolver.output] ``` and ``` @[RoleResolver.output] ```\n\nNow complete this reusing the existing variables and locals and looking at the above code.\n\n@[inputs.SampleLocalIam_member_properties]",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "google_service_account_iam_member_properties"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "wait_time": 30,
                "deployed_gcp": false
            },
            "id": "3a4026692bf1fcbb047c144c0fe410d6e382da02d035931bb880b39b433b0993",
            "_compiled": true,
            "_parents": [
                [
                    "inputs",
                    "Modules"
                ],
                [
                    "SaResolver",
                    "output"
                ],
                [
                    "RoleResolver",
                    "output"
                ],
                [
                    "inputs",
                    "SampleLocalIam_member_properties"
                ]
            ],
            "_children": [
                "FinalLocal"
            ],
            "_inputs": {
                "@[inputs.Modules]": "locals {\n  demo_projects = {\n    core = {\n      project_id           = \"demo-core-project-001\"\n      lzf_project_id       = \"lzf-demo-core-001\"\n      tableau_project_id   = \"demo-tableau-core-001\"\n      service_account_main = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    }\n    analytics = {\n      project_id           = \"demo-analytics-project-002\"\n      lzf_project_id       = \"lzf-demo-analytics-002\"\n      tableau_project_id   = \"demo-tableau-analytics-002\"\n      service_account_main = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    }\n  }\n\n  common_roles = [\n    \"roles/storage.objectViewer\",\n    \"roles/viewer\",\n  ]\n\n  compute_roles = [\n    \"roles/compute.viewer\",\n    \"roles/compute.instanceAdmin\"\n  ]\n}\n\n# Bind roles to a service account in core project using module\nmodule \"core_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.core.project_id\n  service_account_address = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Bind roles to a service account in analytics project using module\nmodule \"analytics_sa_iam\" {\n  source                  = \"terraform-google-modules/iam/google//modules/member_iam\"\n  project_id              = local.demo_projects.analytics.project_id\n  service_account_address = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n  prefix                  = \"serviceAccount\"\n  project_roles           = local.common_roles\n}\n\n# Direct IAM binding on service account for core operations account\nresource \"google_service_account_iam_member\" \"core_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.core.project_id}/serviceAccounts/${local.demo_projects.core.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n}\n\n# Direct IAM binding on service account for analytics operations account\nresource \"google_service_account_iam_member\" \"analytics_ops_binding\" {\n  service_account_id = \"projects/${local.demo_projects.analytics.project_id}/serviceAccounts/${local.demo_projects.analytics.service_account_main}\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = \"serviceAccount:analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n}\n\n# Create a storage bucket in core project\nresource \"google_storage_bucket\" \"core_bucket\" {\n  name          = \"demo-core-storage-bucket\"\n  location      = \"US\"\n  project       = local.demo_projects.core.project_id\n  force_destroy = true\n}\n\n# Bind storage admin role to analytics deployer service account on core bucket\nresource \"google_storage_bucket_iam_member\" \"core_bucket_analytics_binding\" {\n  bucket = google_storage_bucket.core_bucket.name\n  role   = \"roles/storage.admin\"\n  member = \"serviceAccount:analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n}\n\n# Simple compute instance in core project\nresource \"google_compute_instance\" \"demo_instance\" {\n  name         = \"demo-instance-01\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n  project      = local.demo_projects.core.project_id\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {}\n  }\n\n  service_account {\n    email  = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    scopes = [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}",
                "@[SaResolver.output]": "```hcl\nlocals {\n  service_accounts = {\n    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    gh_sa = \"lz-secrets@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    core_deployer_sa = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    analytics_deployer_sa = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n    core_ops_sa = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    analytics_ops_sa = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    core_plugin_sa = \"core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    analytics_plugin_sa = \"analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n  }\n}\n```",
                "@[RoleResolver.output]": "```\nlocals: {\n  roles = {\n    runInvoker: \"roles/run.invoker\",\n    loggingLogWriter: \"roles/logging.logWriter\",\n    roles/storage.objectViewer: \"roles/storage.objectViewer\",\n    roles/viewer: \"roles/viewer\",\n    roles/compute.viewer: \"roles/compute.viewer\",\n    roles/compute.instanceAdmin: \"roles/compute.instanceAdmin\",\n    roles/iam.serviceAccountUser: \"roles/iam.serviceAccountUser\",\n    roles/storage.admin: \"roles/storage.admin\"\n  }\n}\n```",
                "@[inputs.SampleLocalIam_member_properties]": "locals{  google_service_account_iam_member_properties = [    {        service_account_id = module.demo_projects-sa-secret-manager.service_account_id        role               = local.demo_projects.roles.workload_identity_user_role        member             = \"serviceAccount:${local.service_accounts.gke_plugin_sa}\"    },    {        service_account_id = \"projects/${local.demo_projects.project_id}/serviceAccounts/ia-${var.nar_id}-sa-gkeopssm@${local.palace-gcp-1.project_id}.iam.gserviceaccount.com\"        role               = local.demo_projects.service_account_user_role        member             = \"serviceAccount:${local.demo_projects.gke_plugin_sa}\"    },    ... complete this  ]}"
            },
            "_outputs": {
                "output": "```hcl\nlocals {\n  google_service_account_iam_member_properties = [\n    {\n      service_account_id = google_service_account_iam_member.core_ops_binding.service_account_id\n      role               = google_service_account_iam_member.core_ops_binding.role\n      member             = google_service_account_iam_member.core_ops_binding.member\n    },\n    {\n      service_account_id = google_service_account_iam_member.analytics_ops_binding.service_account_id\n      role               = google_service_account_iam_member.analytics_ops_binding.role\n      member             = google_service_account_iam_member.analytics_ops_binding.member\n    }\n  ]\n}\n```"
            },
            "status": "completed"
        },
        "Member_iam_module_properties": {
            "nodeName": "Member_iam_module_properties",
            "systemInstructions": "You are a terraform code generator. Your task is to read a big terraform code and try to generate a list of properties for all the modules that uses 'terraform-google-modules/iam/google//modules/member_iam' as source.",
            "userPrompt": "Create local variable `member_iam_module_properties` to group all the properties of `terraform-google-modules/iam/google//modules/member_iam` modules those are used in the code.\n\nYou have to reuse the existing variables and locals in the code.\nThe existing variables and locals are:\n``` @[SaResolver.output] and ``` @[RoleResolver.output] ```\n\nNow complete this reusing the existing variables and locals and looking at the above code.\n\n```\n@[inputs.SampleMember_iam_module_properties] \n```",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "Member iam_module properties"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "wait_time": 30,
                "deployed_gcp": false
            },
            "id": "0f668d177fa9288109b6e09dcc3dde424e1f109c4010de75f34791fb8793fce8",
            "_compiled": true,
            "_parents": [
                [
                    "SaResolver",
                    "output"
                ],
                [
                    "RoleResolver",
                    "output"
                ],
                [
                    "inputs",
                    "SampleMember_iam_module_properties"
                ]
            ],
            "_children": [
                "FinalLocal"
            ],
            "_inputs": {
                "@[SaResolver.output]": "```hcl\nlocals {\n  service_accounts = {\n    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    gh_sa = \"lz-secrets@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    core_deployer_sa = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    analytics_deployer_sa = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n    core_ops_sa = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    analytics_ops_sa = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    core_plugin_sa = \"core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    analytics_plugin_sa = \"analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n  }\n}\n```",
                "@[RoleResolver.output]": "```\nlocals: {\n  roles = {\n    runInvoker: \"roles/run.invoker\",\n    loggingLogWriter: \"roles/logging.logWriter\",\n    roles/storage.objectViewer: \"roles/storage.objectViewer\",\n    roles/viewer: \"roles/viewer\",\n    roles/compute.viewer: \"roles/compute.viewer\",\n    roles/compute.instanceAdmin: \"roles/compute.instanceAdmin\",\n    roles/iam.serviceAccountUser: \"roles/iam.serviceAccountUser\",\n    roles/storage.admin: \"roles/storage.admin\"\n  }\n}\n```",
                "@[inputs.SampleMember_iam_module_properties]": "member_iam_module_properties = [    {        service_account_address = local.service_accounts.gh_sa        project_roles = [            local.roles.clusterConfigurator,            local.roles.containerViewer,            ...            ] (This is a sample list of roles)    },    ... complete like this    ]}"
            },
            "_outputs": {
                "output": "```hcl\nlocals {\n  member_iam_module_properties = [\n    {\n      service_account_address = local.service_accounts.gh_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_deployer_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_deployer_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_ops_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_ops_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_plugin_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_plugin_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    }\n  ]\n}\n```"
            },
            "status": "completed"
        },
        "FinalLocal": {
            "nodeName": "FinalLocal",
            "systemInstructions": "You are a terraform code generator. Your task is to read some different snippets of terraform code and to combine them into a single terraform code.",
            "userPrompt": "Here are some snippets of terraform code:\nLocal Variables Snippet 1:\n```\n@[inputs. ExistingLocalVar]\n```\nLocal Variables Snippet 2:\n```\n@[Member_iam_module_properties.output]\n```\nLocal Variables Snippet 3:\n```\n@[RoleResolver.output]\n```\nLocal Variables Snippet 4:\n```\n@[SaResolver.output]\n```\nLocal Variables Snippet 5:\n```\n@[google_service_account_iam_member_properties.output]\n```\n\nNow combine all these snippets into a single terraform code.\n\nlocals {\n  ... write the code here\n}",
            "pythonCode": {
                "argument": {},
                "function_body": ""
            },
            "outputSchema": {
                "output": "final local block"
            },
            "useLLM": true,
            "jsonMode": false,
            "toolName": "",
            "toolDescription": "",
            "kwargs": {
                "model_name": "gpt-3.5-turbo",
                "temperature": 0.5,
                "max_output_tokens": 5000,
                "max_retries": 5,
                "wait_time": 30,
                "deployed_gcp": false
            },
            "id": "f5520a14e5d5ba1c7025b2273114e089271fcb2a4879131e8ba7f02a54b45f7f",
            "_compiled": true,
            "_parents": [
                [
                    "Member_iam_module_properties",
                    "output"
                ],
                [
                    "RoleResolver",
                    "output"
                ],
                [
                    "SaResolver",
                    "output"
                ],
                [
                    "google_service_account_iam_member_properties",
                    "output"
                ]
            ],
            "_children": [],
            "_inputs": {
                "@[Member_iam_module_properties.output]": "```hcl\nlocals {\n  member_iam_module_properties = [\n    {\n      service_account_address = local.service_accounts.gh_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_deployer_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_deployer_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_ops_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_ops_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_plugin_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_plugin_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    }\n  ]\n}\n```",
                "@[RoleResolver.output]": "```\nlocals: {\n  roles = {\n    runInvoker: \"roles/run.invoker\",\n    loggingLogWriter: \"roles/logging.logWriter\",\n    roles/storage.objectViewer: \"roles/storage.objectViewer\",\n    roles/viewer: \"roles/viewer\",\n    roles/compute.viewer: \"roles/compute.viewer\",\n    roles/compute.instanceAdmin: \"roles/compute.instanceAdmin\",\n    roles/iam.serviceAccountUser: \"roles/iam.serviceAccountUser\",\n    roles/storage.admin: \"roles/storage.admin\"\n  }\n}\n```",
                "@[SaResolver.output]": "```hcl\nlocals {\n  service_accounts = {\n    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    gh_sa = \"lz-secrets@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    core_deployer_sa = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    analytics_deployer_sa = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n    core_ops_sa = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    analytics_ops_sa = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    core_plugin_sa = \"core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    analytics_plugin_sa = \"analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n  }\n}\n```",
                "@[google_service_account_iam_member_properties.output]": "```hcl\nlocals {\n  google_service_account_iam_member_properties = [\n    {\n      service_account_id = google_service_account_iam_member.core_ops_binding.service_account_id\n      role               = google_service_account_iam_member.core_ops_binding.role\n      member             = google_service_account_iam_member.core_ops_binding.member\n    },\n    {\n      service_account_id = google_service_account_iam_member.analytics_ops_binding.service_account_id\n      role               = google_service_account_iam_member.analytics_ops_binding.role\n      member             = google_service_account_iam_member.analytics_ops_binding.member\n    }\n  ]\n}\n```"
            },
            "_outputs": {
                "output": "```hcl\nlocals {\n  roles = {\n    runInvoker: \"roles/run.invoker\",\n    loggingLogWriter: \"roles/logging.logWriter\",\n    roles/storage.objectViewer: \"roles/storage.objectViewer\",\n    roles/viewer: \"roles/viewer\",\n    roles/compute.viewer: \"roles/compute.viewer\",\n    roles/compute.instanceAdmin: \"roles/compute.instanceAdmin\",\n    roles/iam.serviceAccountUser: \"roles/iam.serviceAccountUser\",\n    roles/storage.admin: \"roles/storage.admin\"\n  }\n\n  service_accounts = {\n    sdlc-cr-sa = \"ia-${var.nar_id}-sa-sdlcd-cr@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    gh_sa = \"lz-secrets@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    core_deployer_sa = \"core-deployer@${local.demo_projects.core.lzf_project_id}.iam.gserviceaccount.com\"\n    analytics_deployer_sa = \"analytics-deployer@${local.demo_projects.analytics.lzf_project_id}.iam.gserviceaccount.com\"\n    core_ops_sa = \"demo-core-ops@demo-core-project-001.iam.gserviceaccount.com\"\n    analytics_ops_sa = \"demo-analytics-ops@demo-analytics-project-002.iam.gserviceaccount.com\"\n    core_plugin_sa = \"core-plugin@${local.demo_projects.core.project_id}.iam.gserviceaccount.com\"\n    analytics_plugin_sa = \"analytics-plugin@${local.demo_projects.analytics.project_id}.iam.gserviceaccount.com\"\n  }\n\n  member_iam_module_properties = [\n    {\n      service_account_address = local.service_accounts.gh_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_deployer_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_deployer_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_ops_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_ops_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.core_plugin_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    },\n    {\n      service_account_address = local.service_accounts.analytics_plugin_sa\n      project_roles = [\n        local.roles.runInvoker,\n        local.roles.loggingLogWriter,\n        local.roles.roles/storage.objectViewer,\n        local.roles.roles/viewer,\n        local.roles.roles/compute.viewer,\n        local.roles.roles/compute.instanceAdmin,\n        local.roles.roles/iam.serviceAccountUser,\n        local.roles.roles/storage.admin\n      ]\n    }\n  ]\n\n  google_service_account_iam_member_properties = [\n    {\n      service_account_id = google_service_account_iam_member.core_ops_binding.service_account_id\n      role               = google_service_account_iam_member.core_ops_binding.role\n      member             = google_service_account_iam_member.core_ops_binding.member\n    },\n    {\n      service_account_id = google_service_account_iam_member.analytics_ops_binding.service_account_id\n      role               = google_service_account_iam_member.analytics_ops_binding.role\n      member             = google_service_account_iam_member.analytics_ops_binding.member\n    }\n  ]\n}\n```"
            },
            "status": "completed"
        }
    },
    "venv_path": "./runner_envs/venv",
    "python_packages": [],
    "create_env": true
}